package Euler1to50;

import java.math.BigInteger;
import java.util.HashMap;

/**
 * 
 * Triangular, pentagonal, and hexagonal Problem 45 Triangle, pentagonal, and
 * hexagonal numbers are generated by the following formulae:
 * 
 * Triangle Tn=n(n+1)/2 1, 3, 6, 10, 15, ... Pentagonal Pn=n(3n−1)/2 1, 5, 12,
 * 22, 35, ... Hexagonal Hn=n(2n−1) 1, 6, 15, 28, 45, ... It can be verified
 * that T285 = P165 = H143 = 40755.
 * 
 * Find the next triangle number that is also pentagonal and hexagonal.
 * 
 * 
 * 
 * @author Chjun-chi
 *
 */
public class TriangularPentagonalAndHexagonal {

	public static void main(String[] args) {
		HashMap<BigInteger, Integer> map = new HashMap<>();
		int length = 100000;
		for (int i = 0; i < length; i++) {
			BigInteger b = new BigInteger((1 + i) + "");
			b = b.multiply(new BigInteger(i + ""));
			b = b.divide(new BigInteger("2"));
			map.put(b, 1);
		}
		for (int i = 1; i < length; i++) {
			BigInteger b = new BigInteger((((i*3) - 1)) + "");
			b = b.multiply(new BigInteger(i + ""));
			b = b.divide(new BigInteger("2"));
		
			if (map.containsKey(b)) {
				int g =1 + map.get(b);
				map.put(b, g);
			} else {
				map.put(b, 1);
			}
		}
		for (int i = 1; i < length; i++) {
			BigInteger b = new BigInteger((((i*2) - 1)) + "");
			b = b.multiply(new BigInteger(i + ""));

			if (map.containsKey(b)) {
				int g =1 + map.get(b);
				map.put(b, g);
			} else {
				map.put(b, 1);
			}
		}
		System.out.println(map.get(new BigInteger("40755")));
		if (map.containsValue(3)) {
			for (BigInteger l : map.keySet()) {
				if (map.get(l) == 3) {
					System.out.println("key = " + l);
				}
			}
		}
		

		Timer t = new Timer();
        for(int i = 286; i < 60000; i++)
            if(isPentagonNum(triangleNum(i)) && isHexagonal(triangleNum(i)))
                System.out.println(i);
        t.time();
System.out.println(triangleNum(55385));
		
	}
public static int triangleNum(int n) {return (int) (0.5 * n * (n + 1.0));}
    
    public static boolean isPentagonNum(int n) {return (Math.sqrt(24*(double)n+1)+1)/6 % 1 == 0;}

    public static boolean isHexagonal(int n) {return (Math.sqrt(8*(double)n+1)+1)/4 % 1 == 0;}

}
